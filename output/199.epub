<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Quick Glossary</title>
<date>2018-05-25</date>
</info>
<preface xml:id="_quick_glossary">
<title>Quick Glossary</title>
<simpara>This quick glossary contains many of the terms used in relation to Ethereum. These terms are used throughout the book, so bookmark this for quick reference.</simpara>
<variablelist>
<varlistentry>
<term>Account</term>
<listitem>
<simpara>An object containing an address, balance, and nonce, and optional storage and code. An account can be a contract account or an EOA (externally owned account).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Address</term>
<listitem>
<simpara>Most generally, this represents an EOA or contract, which can receive (destination address) or send (source address) transactions on the blockchain. More specifically, it is the right-most 160 bits of a Keccak hash of an ECDSA public key.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Assert</term>
<listitem>
<simpara>In Solidity assert(false) compiles to <emphasis role="strong">0xfe</emphasis>, which is an invalid opcode, using up all remaining gas, and reverting all changes.
When an assert() statement fails, something very wrong and unexpected should be happening, and you will need to fix your code.
You should use assert to avoid conditions which should never, ever occur.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Big-endian</term>
<listitem>
<simpara>A positional number representation where the most significant digit is first. The opposite of little-endian, where the least significant digit is first.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>BIP</term>
<listitem>
<simpara>Bitcoin Improvement Proposals.  A set of proposals that members of the Bitcoin community have submitted to improve Bitcoin. For example, BIP-21 is a proposal to improve the Bitcoin uniform resource identifier (URI) scheme.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Block</term>
<listitem>
<simpara>A block is a collection of required information (a block header) about the comprised transactions, and a set of other block headers known as ommers.  It is added to the Ethereum network by miners.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Blockchain</term>
<listitem>
<simpara>A sequence of blocks validated by the proof-of-work system, each linking to its predecessor all the way to the genesis block. This varies from the Bitcoin protocol in that it does not have a block size limit; it instead uses varying gas limits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Bytecode</term>
<term>Byzantium Fork</term>
<listitem>
<simpara>Byzantium is the first of two hard forks for Metropolis development stage. It included EIP-649: Metropolis Difficulty Bomb Delay and Block Reward Reduction, where the Ice Age (see below) was delayed by 1 year, and the block reward was reduced from 5 to 3 ether.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Compiling</term>
<listitem>
<simpara>Converting code written in a high-level programming language (e.g. Solidity) into a lower level language (e.g. EVM bytecode).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Consensus</term>
<listitem>
<simpara>When numerous nodes, usually most nodes on the network, all have the same blocks in their locally-validated best block chain.
Not to be confused with consensus rules.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Consensus rules</term>
<listitem>
<simpara>The block validation rules that full nodes follow to stay in consensus with other nodes. Not to be confused with consensus.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Constantinople</term>
<listitem>
<simpara>The second part of the Metropolis stage, planned for mid-2018. Expected to include a switch to hybrid Proof-of-Work/Proof-of-Stake consensus algorithm, among other changes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Contract account</term>
<listitem>
<simpara>An account containing code that executes whenever it receives a transaction from another account (EOA or contract).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Contract creation transaction</term>
<listitem>
<simpara>A special transaction, with the "zero address" as the recipient, that is used to register a contract and record it on the Ethereum blockchain (see "zero address").</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>DAO</term>
<listitem>
<simpara>Decentralised Autonomous Organization. Companies and other organizations which operate without hierarchical management. Also may refer to a contract named "The DAO" launched on 30th April 2016, which was then hacked in June 2016 and ultimately motivated a hard fork (codenamed DAO) at block #1,192,000 which reversed the hacked DAO contract, and caused Ethereum and Ethereum Classic to split into two competing systems.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>DApp</term>
<listitem>
<simpara>Decentralised Application. At a minimum, it is a smart contract and a web user-interface. More broadly, a DApp is a web application that is built on top of open, decentralized, peer-to-peer infrastructure services. In addition, many DApps include decentralized storage and/or message protocol and platform.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Deed</term>
<listitem>
<simpara>Non-fungible token standard introduced in ERC721 proposal. Unlike ERC20 tokens, deeds prove ownership and are not interchangeable, though they are not recognized as legal documents in any jurisdiction, at least not currently.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Difficulty</term>
<listitem>
<simpara>A network-wide setting that controls how much computation is required to produce a proof of work.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Digital signature</term>
<listitem>
<simpara>A digital signing algorithm is a process by which a user can produce a short string of data called a "signature" of a document using a private key such that anyone with the corresponding public key, the signature, and the document can verify that (1) the document was "signed" by the owner of that particular private key, and (2) the document was not changed after it was signed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ECDSA</term>
<listitem>
<simpara>Elliptic Curve Digital Signature Algorithm, or ECDSA, is a cryptographic algorithm used by Ethereum to ensure that funds can only be spent by their rightful owners.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>EIP</term>
<listitem>
<simpara>Ethereum Improvement Proposals describe proposed standards for the Ethereum platform. An EIP is a design document providing information to the Ethereum community, describing a new feature or its processes or environment. For more information, see <link xl:href="https://github.com/ethereum/EIPs">https://github.com/ethereum/EIPs</link> (also see the definition for ERC, below).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Entropy</term>
<listitem>
<simpara>In the context of Cryptography, lack of predictability, or level of randomness. When generating secret information, such as master private keys, algorithms usually rely on a source of high entropy to ensure the output is unpredictable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ENS</term>
<listitem>
<simpara>Ethereum Name Service. For more information, see <link xl:href="https://github.com/ethereum/ens/">https://github.com/ethereum/ens/</link>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>EOA</term>
<listitem>
<simpara>Externally Owned Account. Accounts created by or for human users of the Ethereum network.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ERC</term>
<listitem>
<simpara>Ethereum Request for Comments. Some EIPs are labeled as ERCs, which denotes proposals attempting to define a specific standard of Ethereum usage.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Ethash</term>
<listitem>
<simpara>A Proof-of-Work algorithm for Ethereum 1.0. For more information, see <link xl:href="https://github.com/ethereum/wiki/wiki/Ethash">https://github.com/ethereum/wiki/wiki/Ethash</link>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Ether</term>
<listitem>
<simpara>Ether is the native cryptocurrency used by the Ethereum ecosystem which covers gas costs when executing Smart Contracts. Its symbol is Îž, the Greek uppercase Xi character.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Event</term>
<listitem>
<simpara>An event allows the use of EVM logging facilities, which in turn can be used to call JavaScript callbacks in the user interface of a DApp, which listen for these events. For more information, see <link xl:href="http://solidity.readthedocs.io/en/develop/contracts.html#events">http://solidity.readthedocs.io/en/develop/contracts.html#events</link>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>EVM</term>
<listitem>
<simpara>Ethereum Virtual Machine, a stack-based virtual machine which executes bytecode. In Ethereum, the execution model specifies how the system state is altered given a series of bytecode instructions and a small tuple of environmental data.
This is specified through a formal model of a virtual state machine.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>EVM Assembly Language</term>
<listitem>
<simpara>A human-readable form of EVM bytecode.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fallback function</term>
<listitem>
<simpara>A default function, called in the absence of data or a declared function name.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Faucet</term>
<listitem>
<simpara>A website that dispenses rewards in the form of free test ether for developers who want to do test on testnets.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Frontier</term>
<listitem>
<simpara>The initial test development stage of Ethereum, which lasted from July 2015 to March 2016.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Ganache</term>
<listitem>
<simpara>Personal Ethereum blockchain which you can use to run tests, execute commands, and inspect state while controlling how the chain operates.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>TODO: Change for Clarity</simpara>
<variablelist>
<varlistentry>
<term>Gas</term>
<listitem>
<simpara>A virtual fuel used in Ethereum to execute smart contracts. The Ethereum Virtual Machine uses an accounting mechanism to measure the consumption of gas and constrain (limit) the consumption of computing resources. See Turing-Complete.
Gas is a unit of computation that is incurred per instruction of Smart Contract executed. The gas is pegged at Ether cryptocurrency. The gas is analogous to talk time on a cellular network. Thus, the price of running a transaction in fiat currency is <literal>gas * (ETH/gas) * (fiat currency/ETH)</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Gas limit</term>
<listitem>
<simpara>When talking about blocks, they too, have a field called gas limit. It defines the maximum amount of gas all transactions in the whole block combined are allowed to consume.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Genesis block</term>
<listitem>
<simpara>The first block in the blockchain, used to initialize a particular network and its cryptocurrency.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Geth</term>
<listitem>
<simpara>Go Ethereum. One of the most prominent implementations of the Ethereum protocol written in Go.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Hard fork</term>
<listitem>
<simpara>Hard fork, also known as Hard-Forking Change, is a permanent divergence in the blockchain, commonly occurs when non-upgraded nodes can&#8217;t validate blocks created by upgraded nodes that follow newer consensus rules. Not to be confused with fork, soft fork, software fork or Git fork.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Hash</term>
<listitem>
<simpara>A fixed-length fingerprint of variable-size input produced by a hash function.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>HD wallet</term>
<listitem>
<simpara>Wallets using the Hierarchical Deterministic (HD Protocol) key creation and transfer protocol (BIP32).</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>HD wallet seed</term>
<listitem>
<simpara>HD wallet seed or root seed is a potentially-short value used as a seed to generate the master private key and master chain code for an HD wallet. The wallet seed can be represented by mnemonic words making it easier for humans to copy, backup and restore private keys.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Homestead</term>
<listitem>
<simpara>The second development stage of Ethereum, launched in March 2016 at block #1,150,000.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Ice Age</term>
<listitem>
<simpara>A hard fork of Ethereum at block #200,000 to introduce an exponential difficulty increase (aka Difficulty Bomb), motivating a transition to Proof-of-Stake.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>IDE (Integrated Development Environment)</term>
<listitem>
<simpara>An integrated user interface that combines a code editor, compiler, runtime, and a debugger.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Immutable Deployed Code Problem</term>
<listitem>
<simpara>Once a contract&#8217;s (or library&#8217;s) code is deployed it becomes immutable. Being able to fix possible bugs and add new features is key for the software development cycle. This represents a challenge for smart contract development.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Inter exchange Client Address Protocol (ICAP)</term>
<listitem>
<simpara>An Ethereum Address encoding that is partly compatible with the International Bank Account Number (IBAN) encoding, offering a versatile, checksummed and interoperable encoding for Ethereum Addresses. ICAP addresses can encode Ethereum Addresses or common names registered with an Ethereum name registry. They always begin with XE. The aim is to introduce a new IBAN country code: XE, Ethereum E prefixed with the "extended" X, as used in non-jurisdictional currencies (e.g. XBT, XRP, XCP).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Internal transaction (also "message")</term>
<listitem>
<simpara>A transaction sent from a contract account to another contract account or an EOA.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Keccak256</term>
<listitem>
<simpara>Cryptographic hash function used in Ethereum. Keccak256 was standardised to SHA-3.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Key Derivation Function (KDF)</term>
<listitem>
<simpara>Also known as a password stretching algorithm, it is used by keystore format which to protect against brute-force, dictionary, or rainbow table attacks against the passphrase encryption. It repeatedly hashes the passphrase.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Keystore File</term>
<listitem>
<simpara>A JSON-encoded file that contains a single (randomly generated) private key, encrypted by a passphrase for extra security.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>LevelDB</term>
<listitem>
<simpara>LevelDB is an open source on-disk key-value store. LevelDB is a light-weight, single-purpose library for persistence with bindings to many platforms.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Library</term>
<listitem>
<simpara>A library in Ethereum is a special type of contract that has no payable functions, no fallback function, and no data storage. Therefore, it cannot receive or hold ether, or store data. A library serves as previously deployed code that other contracts can call for read-only computation.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Lightweight client</term>
<listitem>
<simpara>A lightweight client is an Ethereum client that does not store a local copy of the blockchain, or validate blocks and transactions. It offers the functions of a wallet and can create and broadcast transactions.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Merkle Patricia Tree</term>
<term>Message</term>
<listitem>
<simpara>An internal transaction that is never serialized and only sent within the EVM.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Metropolis Stage</term>
<listitem>
<simpara>Metropolis is the third development stage of Ethereum, launched in October 2017.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>METoken</term>
<listitem>
<simpara>Mastering Ethereum Token. An ERC20 token used for demonstration in this book.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Miner</term>
<listitem>
<simpara>A network node that finds valid proof of work for new blocks, by repeated hashing.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mist</term>
<listitem>
<simpara>Mist is the first ever Ethereum enabled browser, built by the Ethereum Foundation. It also contains a browser based wallet that was the first ever implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20 was also the main developer in Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-155, see <xref linkend="eip-155"/>). Mist runs a full node, and offers a full DApp browser with support for Swarm based storage and ENS addresses.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Network</term>
<listitem>
<simpara>A peer-to-peer network that propagates transactions and blocks to every Ethereum node (network participant).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Node</term>
<listitem>
<simpara>A software client that is participating in the peer-to-peer network.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Nonce</term>
<listitem>
<simpara>In cryptography, the term nonce is used to refer to a value that can only be used once. There are two types of nonce used in Ethereum.</simpara>
<itemizedlist>
<listitem>
<simpara>Account nonce - It&#8217;s simply the transaction count of an account.</simpara>
</listitem>
<listitem>
<simpara>Proof of work nonce - The random value in a block that was used to get the proof of work satisfied (depending on the difficulty at the time).</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Ommer</term>
<listitem>
<simpara>A child block of an ancestor that is not itself an ancestor. When a miner finds a valid block, another miner may have published a competing block which is added to the tip of the blockchain. Unlike bitcoin, orphaned blocks in Ethereum can be included by newer blocks as ommers and receive a partial block reward. The term "ommer" is the preferred gender neutral term for the sibling of a parent node, but is also referred to as an "uncle".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Paralysis Problem</term>
<listitem>
<simpara>A common powerful approach to key management for cryptocurrencies is multisig transactions, referred to more generally as secret sharing.
But, what would happen if one of the shared keys was lost? The result would be a complete loss of all of the funds.<?asciidoc-br?>
This isnâ€™t the only bad scenario. Itâ€™s also possible that the key-share holders have different ideas about how the money should be spent, and canâ€™t come to an agreement.<?asciidoc-br?>
We use the term <emphasis>Paralysis Problem</emphasis> to denote any of these awkward situations.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Paralysis Proof System</term>
<listitem>
<simpara>Paralysis Proofs help address a pervasive key-management problem in cryptocurrencies. See <emphasis role="strong">Paralysis Problem</emphasis>.<?asciidoc-br?>
A Paralysis Proof System can tolerate system paralysis in settings where players fail to act in concert.<?asciidoc-br?>
A Paralysis Proof System can be realized relatively easily for Ethereum using a smart contract.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Parity</term>
<listitem>
<simpara>One of the most prominent interoperable implementations of the Ethereum client software.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Proof-of-Stake</term>
<listitem>
<simpara>Proof-of-Stake (PoS) is a method by which a cryptocurrency blockchain protocol aims to achieve distributed consensus. Proof-of-Stake asks users to prove ownership of a certain amount of cryptocurrency (their "stake" in the network) in order to be able to participate to the validation of transactions.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Proof-of-Work</term>
<listitem>
<simpara>A piece of data (the proof) that requires significant computation to find. In Ethereum, miners must find a numeric solution to the Ethash algorithm that meets a network-wide difficulty target.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Receipt</term>
<listitem>
<simpara>Data returned by an Ethereum client to represent the result of a particular transaction, including a hash of the transaction, its block number, the amount of gas used and, in case of deployment of a Smart Contract, the address of the Contract.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Reentrancy Attack</term>
<listitem>
<simpara>This attack can be reproduced when the Attacker contract calls to a Victim contract function, let&#8217;s call it victim.withdraw(), in manner that before the original call to that contract function ever finishes, it calls the victim.withdraw() method again which continues to recursively call itself.
This recursive call can be implemented from a fallback function of the Attacker contract.
The only trick that the attacker has to perform is to break that recursive call before running out of gas and so avoiding the stolen ether be reverted.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Require</term>
<listitem>
<simpara>In Solidity, require(false) compiles to <emphasis role="strong">0xfd</emphasis> which is the <emphasis role="strong">REVERT</emphasis> opcode. The REVERT instruction provides a way to stop execution and revert state changes, without consuming all provided gas and with the ability to return a reason.<?asciidoc-br?>
The require function should be used to ensure valid conditions, such as inputs, or contract state variables are met, or to validate return values from calls to external contracts.<?asciidoc-br?>
Prior to the <emphasis role="strong">Byzantium</emphasis> network upgrade there were two practical ways to revert a transaction: running out of gas or executing an invalid instruction. Both of these options consumed all remaining gas.<?asciidoc-br?>
When you look up this opcode in the <emphasis role="strong">Yellow Paper</emphasis> prior to the <emphasis role="strong">Byzantium</emphasis> network upgrade, you can&#8217;t find it and because there was no specification for that opcode, when the EVM reached it, it thrown an <emphasis>invalid opcode error</emphasis>.<?asciidoc-br?></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Revert</term>
<listitem>
<simpara>Use revert() when you need to handle the same type of situations as <link linkend="require-sentence">require()</link> but with more complex logic.
For instances, if your code have some nested if/else logic flow, you will find that it makes sense to use <link linkend="require-sentence">require()</link> instead of require().</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Reward</term>
<listitem>
<simpara>An amount, in Ether (ETH), included in each new block as a reward by the network to the miner who found the Proof-of-Work solution.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Recursive Length Prefix (RLP)</term>
<listitem>
<simpara>RLP is an encoding standard, designed by the Ethereum developers to encode and serialize objects (data structures) of arbitrary complexity and length.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Satoshi Nakamoto</term>
<listitem>
<simpara>Satoshi Nakamoto is the name used by the person or people who designed Bitcoin and created its original reference implementation, Bitcoin Core. As a part of the implementation, they also devised the first blockchain database. In the process they were the first to solve the double spending problem for digital currency. Their real identity remains unknown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Singleton</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Vitalik Buterin</term>
<listitem>
<simpara>Vitalik Buterin is a Russian-Canadian programmer and writer primarily known as the co-founder of Ethereum and as the co-founder of Bitcoin Magazine.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Gavin Wood</term>
<listitem>
<simpara>Gavin Wood is a British programmer who is the co-founder and former CTO of Ethereum. In August 2014 he proposed Solidity, a contract-oriented programming language for writing smart contracts.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Secret key (aka private key)</term>
<listitem>
<simpara>The secret number that allows Ethereum users to prove ownership of an account or contracts, by producing a digital signature (see public key, address, ECDSA).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>SHA</term>
<listitem>
<simpara>The Secure Hash Algorithm or SHA is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>SELFDESTRUCT opcode</term>
<listitem>
<simpara>Smart contracts will exist and be executable as long as the whole network exists. They will disappear from the blockchain if they were programmed to self destruct or performing that operation using delegatecall or callcode.
Once self-destruct operation is performed, the remaining Ether stored at the contract address is sent to another address and the storage and code is removed from the state.
Although this is the expected behavior, the pruning of self-destructed contracts may or may not be implemented by Ethereum clients.
SELFDESTRUCT was previously called SUICIDE, with EIP6, SUICIDE was renamed to SELFDESTRUCT.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Serenity</term>
<listitem>
<simpara>The fourth and final development stage of Ethereum. Serenity does not yet have a planned release date.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Serpent</term>
<listitem>
<simpara>A procedural (imperative) programming language with syntax similar to Python. Can also be used to write functional (declarative) code, though it is not entirely free of side effects. Used sparsely. First created by Vitalik Buterin.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Smart Contract</term>
<listitem>
<simpara>A program which executes on the Ethereum&#8217;s computing infrastructure.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Solidity</term>
<listitem>
<simpara>A procedural (imperative) programming language with syntax that is similar to JavaScript, C++ or Java. The most popular and most frequently used language for Ethereum smart contracts. First created by Gavin Wood (co-author of this book).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Solidity inline assembly</term>
<listitem>
<simpara>Inline assembly is contained code within Solidity that use EVM Assembly, which can be seen as the human-readable form of EVM-code. Inline assembly tries to facilitate inherent difficulty and other issues arising when writing manual assembly.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Spurious Dragon</term>
<listitem>
<simpara>A hard fork at block #2,675,00 to address more denial of service attack vectors, and another state clearing. Also, a replay attack protection mechanism.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Swarm</term>
<listitem>
<simpara>A decentralised (P2P) storage network. It is used along with Web3 and Whisper to build DApps.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Tangerine Whistle</term>
<listitem>
<simpara>A hard fork at block #2,463,00 to change the gas calculation for certain IO-heavy operations and to clear the accumulated state from a denial of service attack, which exploited the low gas cost of those operations.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Testnet</term>
<listitem>
<simpara>A test network (testnet for short) is used to simulate the behavior of the main Ethereum network.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Transaction</term>
<listitem>
<simpara>Data committed to the Ethereum Blockchain signed by an originating account, targeting a specific address. The transaction contains metadata such as the gas limit for the transaction.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Truffle</term>
<listitem>
<simpara>One of the most commonly used Ethereum Development Frameworks. It is composed of several NodeJS packages and can be installed using Node Package Manager (NPM).</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Turing Complete</term>
<listitem>
<simpara>In computability theory, a system of data-manipulation rules (such as a computer&#8217;s instruction set, a programming language, or a cellular automaton) is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine. The concept is named after English mathematician and computer scientist Alan Turing.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Vyper</term>
<listitem>
<simpara>A high-level programming language, similar to Serpent with Python-like syntax. Intended to get closer to a pure-functional language. First created by Vitalik Buterin.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Wallet</term>
<listitem>
<simpara>Software that holds all your secret keys. Used as the interface to access and control your Ethereum accounts and interact with Smart Contracts. Notice that keys need not be stored in your wallet and can be retrieved from an offline storage (e.g. USB flash drive or paper) for improved security. Despite the name, wallets never store the actual coins or tokens.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Web3</term>
<listitem>
<simpara>The third version of the web. First proposed by Gavin Wood, Web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Wei</term>
<listitem>
<simpara>The smallest denomination of ether. 10<superscript>18</superscript> wei = 1 ether.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Whisper</term>
<listitem>
<simpara>A decentralised (P2P) messaging service. It is used along with Web3 and Swarm to build DApps.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Zero address</term>
<listitem>
<simpara>A special Ethereum address, with all 20-bytes as zeros, that is specified as a destination address in the "contract creation transaction".</simpara>
</listitem>
</varlistentry>
</variablelist>
</preface>
</book>